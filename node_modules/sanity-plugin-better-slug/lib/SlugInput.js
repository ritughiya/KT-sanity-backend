"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const speakingurl_1 = __importDefault(require("speakingurl"));
const ui_1 = require("@sanity/ui");
const PathUtils = __importStar(require("@sanity/util/paths"));
const ChangeIndicator_1 = require("@sanity/base/lib/change-indicators/ChangeIndicator");
const form_builder_1 = require("part:@sanity/form-builder");
const patch_event_1 = __importStar(require("part:@sanity/form-builder/patch-event"));
const default_1 = __importDefault(require("part:@sanity/components/formfields/default"));
const createPatchFrom = (value) => patch_event_1.default.from(value === '' ? patch_event_1.unset() : patch_event_1.set(value));
function getNewFromSource(source, valuePath, document) {
    const parentPath = valuePath.slice(0, -1);
    const parent = PathUtils.get(document, parentPath);
    return Promise.resolve(typeof source === 'function'
        ? source(document, { parentPath, parent })
        : PathUtils.get(document, source));
}
/**
 * Custom slug component for better UX & safer slugs:
 * - shows the final URL for the relative address (adds the BASE.PATH/ at the start)
 * - removes special characters and startin/trailing slashes
 */
class SlugInput extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.focus = () => {
            if (this.inputRef && this.inputRef.current) {
                this.inputRef.current.focus();
            }
        };
        this.updateValue = (strValue) => {
            var _a;
            const patchValue = { _type: ((_a = this.props.type) === null || _a === void 0 ? void 0 : _a.name) || 'slug', current: strValue };
            this.props.onChange(createPatchFrom(patchValue));
        };
        /**
         * Avoids trailing slashes, double slashes, spaces, special characters and uppercase letters
         */
        this.formatSlug = (input) => {
            var _a, _b;
            const customValue = typeof input === 'string' ? input : undefined;
            let finalSlug = customValue || ((_a = this.props.value) === null || _a === void 0 ? void 0 : _a.current) || '';
            // Option that can be passed to this input component to format values on input
            const customSlugify = (_b = this.props.type.options) === null || _b === void 0 ? void 0 : _b.slugify;
            if (customSlugify) {
                finalSlug = customSlugify(finalSlug || '');
            }
            else {
                // Removing special characters, spaces, uppercase letters, etc.
                finalSlug = finalSlug
                    // As we want to allow slashes between segments (segment-1/segment-2)
                    // We're splitting the string to preserve these slashes
                    .split('/')
                    // If a segment is empty, this means a starting or trailing slash, or double slashes, which we want to get rid of
                    .filter((segment) => !!segment)
                    .map((segment) => speakingurl_1.default(segment, { symbols: true }))
                    .join('/');
            }
            // Finally, save this final slug to the document
            this.updateValue(finalSlug);
        };
        this.generateSlug = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const { document, type } = this.props;
            const newSlug = yield getNewFromSource((_a = type.options) === null || _a === void 0 ? void 0 : _a.source, this.props.getValuePath(), document);
            this.formatSlug(newSlug);
        });
        this.inputRef = react_1.default.createRef();
        this.state = {
            basePath: undefined,
        };
    }
    componentDidMount() {
        const { type, document } = this.props;
        const options = type.options;
        const getBasePath = () => __awaiter(this, void 0, void 0, function* () {
            if (typeof (options === null || options === void 0 ? void 0 : options.basePath) === 'string') {
                return options.basePath;
            }
            if (typeof (options === null || options === void 0 ? void 0 : options.basePath) === 'function') {
                try {
                    const value = yield Promise.resolve(options.basePath(document));
                    return value;
                }
                catch (error) {
                    console.error(error);
                    return undefined;
                }
            }
            return undefined;
        });
        getBasePath().then((basePath) => {
            if (basePath) {
                this.setState({ basePath });
            }
        });
    }
    render() {
        var _a;
        const { value, type, compareValue } = this.props;
        return (react_1.default.createElement(ui_1.ThemeProvider, { theme: ui_1.studioTheme },
            react_1.default.createElement(ChangeIndicator_1.ChangeIndicatorCompareValueProvider, { value: value === null || value === void 0 ? void 0 : value.current, compareValue: compareValue === null || compareValue === void 0 ? void 0 : compareValue.current },
                react_1.default.createElement(default_1.default, { label: type.title || type.name, description: type.description, level: this.props.level, 
                    // Necessary for validation warnings to show up contextually
                    markers: this.props.markers, 
                    // Necessary for presence indication
                    presence: this.props.presence },
                    react_1.default.createElement(ui_1.Stack, { space: 3 },
                        react_1.default.createElement(ui_1.Flex, null,
                            this.state.basePath && (react_1.default.createElement(ui_1.Card, { border: true, padding: 1, radius: 2, flex: 1, style: {
                                    maxWidth: '30ch',
                                    whiteSpace: 'nowrap',
                                    overflow: 'hidden',
                                    textOverflow: 'ellipsis',
                                    alignItems: 'center',
                                    background: '#f2f2f2',
                                }, display: "flex" }, `${this.state.basePath}/`)),
                            react_1.default.createElement(ui_1.Box, { flex: 2 },
                                react_1.default.createElement(ui_1.TextInput, { onChange: (event) => this.updateValue(event.target.value), onBlur: this.formatSlug, value: (value === null || value === void 0 ? void 0 : value.current) || '', readOnly: this.props.readOnly })),
                            ((_a = type.options) === null || _a === void 0 ? void 0 : _a.source) && (react_1.default.createElement(ui_1.Box, { marginLeft: 1 },
                                react_1.default.createElement(ui_1.Button, { mode: "ghost", type: "button", disabled: this.props.readOnly, onClick: this.generateSlug, text: 'Generate' })))))))));
    }
}
exports.default = form_builder_1.withValuePath(form_builder_1.withDocument(SlugInput));
